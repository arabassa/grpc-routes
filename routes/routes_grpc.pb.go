// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_routes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetRoutesClient is the client API for GetRoutes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetRoutesClient interface {
	// Sends a route table
	SendRoutes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesReply, error)
}

type getRoutesClient struct {
	cc grpc.ClientConnInterface
}

func NewGetRoutesClient(cc grpc.ClientConnInterface) GetRoutesClient {
	return &getRoutesClient{cc}
}

func (c *getRoutesClient) SendRoutes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesReply, error) {
	out := new(RoutesReply)
	err := c.cc.Invoke(ctx, "/routes.GetRoutes/SendRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetRoutesServer is the server API for GetRoutes service.
// All implementations must embed UnimplementedGetRoutesServer
// for forward compatibility
type GetRoutesServer interface {
	// Sends a route table
	SendRoutes(context.Context, *RoutesRequest) (*RoutesReply, error)
	mustEmbedUnimplementedGetRoutesServer()
}

// UnimplementedGetRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedGetRoutesServer struct {
}

func (UnimplementedGetRoutesServer) SendRoutes(context.Context, *RoutesRequest) (*RoutesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoutes not implemented")
}
func (UnimplementedGetRoutesServer) mustEmbedUnimplementedGetRoutesServer() {}

// UnsafeGetRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetRoutesServer will
// result in compilation errors.
type UnsafeGetRoutesServer interface {
	mustEmbedUnimplementedGetRoutesServer()
}

func RegisterGetRoutesServer(s grpc.ServiceRegistrar, srv GetRoutesServer) {
	s.RegisterService(&GetRoutes_ServiceDesc, srv)
}

func _GetRoutes_SendRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetRoutesServer).SendRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.GetRoutes/SendRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetRoutesServer).SendRoutes(ctx, req.(*RoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetRoutes_ServiceDesc is the grpc.ServiceDesc for GetRoutes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetRoutes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.GetRoutes",
	HandlerType: (*GetRoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRoutes",
			Handler:    _GetRoutes_SendRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routes/routes.proto",
}
